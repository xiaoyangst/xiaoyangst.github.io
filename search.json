[{"title":"大学毕业","url":"/2024/08/05/大学毕业/","content":"\n大学毕业是和学生时代彻底告别\n\n![biye.jpg](/images/2024/08/05/510c4b00-52f5-11ef-a753-f7b4ec4e347a.jpg)","tags":["杂文"],"categories":["various"]},{"title":"虚析构函数的场景","url":"/2024/08/05/虚析构函数的场景/","content":"\n如果这个类不作为任何类的基类，析构函数是否为虚函数并不重要，因为它不必承担回收派生类资源的责任。那什么情况下给析构函数声明为虚函数是必要的？\n\n**通过基类的指针来删除派生类的对象时，基类的析构函数应该是虚函数**。\n\n## 会被继承但不需要虚析构函数\n\n```c++\nclass NonCopyable {\n protected:\n  NonCopyable(const NonCopyable &) = delete; // 阻止拷贝\n  NonCopyable &operator=(const NonCopyable &) = delete;  // 阻止赋值\n  NonCopyable() = default;\n  ~NonCopyable() = default;\n};\n```\n\n任何需要防止被拷贝和赋值都需要删除拷贝构造函数和赋值运算符函数，为了方便，继承 NonCopyable类 即可。既然这个类就是用来给其它类继承，为何却没有把析构函数声明为虚函数呢？因为我们不会通过 NonCopyable类 来创建对象，仅仅只是提供阻止拷贝和阻止赋值的功能给到派生类。\n\n## 会被继承且需要虚析构函数\n\n```c++\nclass Derived : public NonCopyable {\npublic:\n    virtual ~Derived() {  // 添加虚析构函数\n        // Derived 的清理代码\n    }\n    void doSomething() {\n        // 示例方法\n    }\n};\n\nclass MoreDerived : public Derived {\npublic:\n    ~MoreDerived() override {\n        // MoreDerived 的清理代码\n    }\n};\n```\n\nDerived 类是 NonCopyable 的派生类，是 MoreDerived 的基类。我们前面讲过 NonCopyable 类不可能用来创建对象，现在Derived 类作为MoreDerived 的基类，当Derived 类作为MoreDerived 类对象的指针的时候，Derived 类就需要承担回收MoreDerived 类对象资源的责任（调用MoreDerived 类对象的析构函数）。基于上述分析，我们需要把Derived 类的析构函数声明为虚函数。\n\n## 析构函数的调用顺序\n\n当删除一个基类指针指向的派生类对象时，首先调用派生类的析构函数，然后调用基类的析构函数。这是为了确保派生类的资源先被正确释放，然后再释放基类的资源。\n\n```c++\nclass Base {\npublic:\n    virtual void func() {\n        std::cout << \"Base::func\" << std::endl;\n    }\n    virtual ~Base() {\n        std::cout << \"Base destructor\" << std::endl;\n    }\n};\n\nclass Derived : public Base {\npublic:\n    void func() override {\n        std::cout << \"Derived::func\" << std::endl;\n    }\n    ~Derived() override {\n        std::cout << \"Derived destructor\" << std::endl;\n    }\n};\n\nint main() {\n    Base* ptr = new Derived();\n    ptr->func(); // 调用 Derived::func\n    delete ptr;  // 确保调用 Derived 析构函数，然后调用 Base 析构函数\n    return 0;\n}\n```\n\n那我们就要提出一些有趣的问题：\n\n通过基类创建的派生类对象究竟是基类对象还是派生类对象？是派生类对象。\n\n既然是创建的派生类对象为什么需要调用基类的析构函数？虽然基类没有创建对象，但派生类对象不仅包含派生类的成员，还包含基类的成员。基类的成员是派生类对象的一部分，因此在创建派生类对象时，实际上包含了两个部分：基类部分和派生类部分。基类的成员只能由基类清理，不能由派生类清理。派生类的成员也只能由派生类清理，不能由基类清理。但是将基类的析构声明为虚函数会调用派生类的析构函数，否则只会调用自己的析构函数，从而造成派生类对象的内存泄漏。\n\n## 最后的话\n\n只要弄清楚什么情况下把析构函数声明为虚函数，才不会盲目给任何类的析构函数声明为虚函数。因为虚函数会创建虚函数表，这个不必要的开销能避免就要避免。","tags":["CPP"],"categories":["technology"]},{"title":"偶遇表哥","url":"/2024/08/05/偶遇表哥/","content":"\n当语文老师微弱的中指和食指轻夹着那只垂垂欲坠的粉笔，她的笔尖刚好足够在黑板上勉强书写。然而，随着时间推移，字迹不可避免地开始逐渐扭曲，仿佛代表着生命的枯萎。她的大拇指坚定地托着，食指却用力压住粉笔，而她的右手明显地微微颤抖。这一切似乎与学生们的课堂听课与否无关，只有前几排的学生在静静地聆听，而其他地方则是一片喧哗。\n\n刚开始转到这所学校时，我曾是一个成绩相当理想的学生，然而，逐渐深陷恶劣的学习环境后，我渐渐明白，我并非那种具备坚强意志力，能够随环境变化而灵活调整学习方法的人。仅仅不到几个月，我的学习动力就彻底消失了。一开始，我感到奇怪为什么老师不干涉学生的不良行为，她不会觉得自己受到侮辱吗？然而，我渐渐理解到，老师固然年迈，早已看透这个年龄段的学生。而我也逐渐融入了这个班级的氛围，不再关心老师的态度。\n\n那个年纪的我不会感到压力，满脑子就是玩，总计划着如何避开家里人的视线和注意溜出去。家里边不怎么给零花钱，只能到游戏厅看别人玩游戏，要是能遇到哪个熟人或者刚开始到游戏厅不会使用机器的人，主动好心帮助他人是有机会一起玩的。\n\n记得有天放学回家的路上，一如既往要去游戏厅看看，得经过一座平桥，桥上两边大概率会站着几个小混混，专门收小学生的钱，一般会招手叫你过去，拍拍你两边的裤兜，没有就放行。我的应对策略是，给里面剪一个口子，钱就会掉到最底端，或者把钱放在鞋底板下面也是比较安全的。实际上搜索的繁杂性，是对自身权力和力量的宣张，也逐渐提高对被搜索者的侮辱性。常在河边走，哪有不湿脚？但对方的目标是我表哥，可就是这样一个人，身体力量与我平起平坐的人，却在我的懦弱之下肆意妄为。但时隔多年，我却心生一个疑问，他怎么知道钱会有藏在鞋底板的可能？想必也是“天涯沦落人”，这一高一下的世界里，谁又是绝对意义上的强者，谁又是绝对意义上的弱者、可怜者，也许我没有谈及自己，从整体性来讲是不道德的，遮人耳目的。\n\n只要过了这个关卡，后面基本不会遇到麻烦事，但我已经没有心情去游戏厅，在接下来转角就会走进一个小区，对这个地方有点印象。之前刚好是枇杷树开花时期，被白洁的外表惊艳到，和朋友决定势必要上树将其取下，嗅一嗅气味后，失望之余还得骂上几句。继续往前走，小区里边有两座水泥做的石板乒乓球台，旁边就是一小段梯步，梯步后面就是平坦的小路。正打算从那边过去，刚好看到一群人正围着一个学生，我看得出他满眼惊恐，眼神盯着刚刚踹他一脚的人，立即被其呵斥，不敢再看。人群中有熟人，是我的表哥！紧张的身体一下子就放松下来，有种自信，有种理所应当的上前，不会有任何危险的以为，慢慢来到这些人的面前打声招呼，如此自然融入其中？见我在旁边看着，他就像一个足球在众人围的圆中来回折腾，圆的面积会在施加不同力度和身体稳定性变化的情况下忽大忽小，我在旁边看此圆的外表被围成的畸形无比，像个身心轻松的数学家思考此圆的面积的求法。表哥问我要不要给这个人来上一脚，反正他不敢还手，我笑着摇手以示拒绝，随后退在一旁，苦笑中略感难受。这个人被打的原因是没有完成偷手机的任务，怪不得表哥手里面有那么多的手机，当时被翻盖手机闪亮亮的外壳，以及开屏的铃声吸引，还幻想什么时候自己也能有一个。\n\n怒气在暴力的持续输出下渐渐得到安抚，人是铁饭是钢嘛，手机今天是无论如何也拿不到了，可也不能轻易地放过这小子，总得用他的手艺给大家伙办点实事，捞点好处吧？表哥一群人带着他穿过几条马路，路过一家小商铺，当时的小商铺老板眼睛也没有盯着外边。起初我不觉得这是一个破绽，但事实证明只要有胆量和手法，你观念中的不可能只是从来没有得到证明的狭隘认知而已，同时也从他身上知道熟练的小偷光天化日之下实施具体行为是表现得自然而然，而非像个小偷。他先是观察老板的动向，然后故作拉开裤子拉链撒尿的姿态，以速度略微快于普通买家但又不会以他明显能更快的速度拿走面前最近的一瓶绿茶饮料，整个过程就像付了钱一样，理应拿走属于自己的东西。老板在毫无察觉的情况下就像头上自然地脱落一根细发，无足轻重，唯我惊讶不已。小商铺的右侧就是一个小巷口，大家伙收获满满的躲进小巷，饮料你一口我一口，没一会儿就空瓶了，留了一点因来回交接的撞击下产生的气泡沫沫留给他，和小气鬼吃完辣条后给你舔包包上的辣椒油和辣椒籽一个德行。我没有参与分享饮料的过程，我身体本能的拒绝参与开始到现在的一切不正当活动，我想这是后来我与表哥走上不同人生道路的原因。后面表哥一伙还要去同学家，才知道这几个人都是互相认识的同班同学，我也就没跟着去，而是半路就选择离开，毕竟走几步就到家门口，也就告别了他们。后来听说他们也参与了偷盗行为，合伙偷了几包烟，把两个老人玩得团团转。具体情况是先安排几个人去前面故作姿态要买东西，吸引火力过去之后，由于商店的橱柜是半圆形，安排两个人去另外一个地方取出橱柜里面的烟即可，调虎离山之计得以实施。\n\n后面家里边生意发生变故，与表哥家合伙干的五金店铺最后闹掰了，为了公平起见，大家选择抓阄的方式，结果是我家没能得到店铺，最后进行财产的平均分割。我非常清楚父母为了赚钱做出过很多尝试，所以我短短几年就随着父母到处折腾，更换了很多城市和学校，成绩也是因为环境的质量忽高忽低。父母毕竟积累了一些经验，实在是不甘心放弃开五金店铺的想法，到处在周边找店铺，但是价格总不让满意，最后也是不得不选择离开那座城市，回到老家县城那边开店到现在，至此和表哥几乎断了联系。只是后面听说他没有读初中，而是选择打工，这应该是被读书无用论的想法迫害，对于几乎包里边没钱的未成年人来说，年纪轻轻被两三千元的工资诱惑是情有可原的。\n\n再一次偶遇表哥是在我从县城回老家的路上，简单的聊聊天。表哥和很多没选择继续读书的人一样，后悔当初冲动的选择，表达还是该读书的想法，但我知道这类人还是没能够想明白读书是不受太多条件制约的，感叹那番话只是错误的认为读书是安逸的地方。又或者，这只是他试图逃避当前不好处境的极端的想法，真要是把学校的内容摆在面前，恐怕就会回忆起当初的决定是多么符合自己的心意。于我而言，叶公好龙之举而已。但很遗憾，亦如当初，我只是浅笑以示回应，并没有说出这番带有提醒意味的话。也许，我一直觉得年龄比他小一岁的缘故。","tags":["回忆不止"],"categories":["shortStory"]},{"title":"男女情感历程发展及其意义","url":"/2024/08/05/男女情感历程发展及其意义/","content":"\n如果不能明确表达对一个人的喜欢，那就不要随意说出来。倒不是讲传递喜欢一个人的信息之后，没过多久另喜她人是多么可耻的事情，而是会让你的话语失去可信度，想必你没有忘记“狼来了”的寓言故事。思想观念的转变更可能是进步的表征，特别是年轻的时候，可这种转变的过程应该放在心里，不管你鼓捣多少次都不为过，但如果一说出口就又收回，就难免被人看不起。接下来，我们谈论的“喜欢”是指那种已经确定不会轻易改变的情感。\n\n我发觉有些错误的观念源于对过去真实情况的遮蔽或者人为强行建立的联系。就拿社会上的感情观来讲，大家默许喜欢一个人就应该以谈恋爱为目的，谈恋爱就应该以结婚为目的。这种潜规则可不会让大家都满意，起码不让我满意。那么，为什么会发展成为这样，自然而然地事情居然堕落成非本来面目？\n\n喜欢一个人需要解释吗？可以有，可麻烦的很，你在思考这个原因的过程就是思考你自己，我建议你把这个机会留在分手之后，因为那时悲伤情绪与困惑将激发你的大脑来寻找问题的解决方案。希望这句话没有任何诅咒的隐义。\n\n为了使喜欢的情感变得更加具体，与对方建立友谊是必要的。如果你不能成为她的朋友，还指望这段关系能够长久吗？从成为朋友开始，你能够真正地了解彼此，喜欢不再是虚无缥缈的情感。不久之后，你可能会发现一个问题，她的异性朋友可能不止你一个，那怕排除这种可能，同性朋友也会影响你与她之间关系的发展。在还未成为恋人之前，异性朋友的优先权低于同性朋友，除非她喜欢你。朋友关系和恋人关系之间有明显的不同，更多的本性可能会暴露，因为距离更近了。如果在恋情中，你没有想要离开她或寻找新对象的想法，那接下来就是让两人的关系得到亲友和社会认可\n\n有一句话流传甚广：不以结婚为目的的恋爱就是流氓。但这样的言论是否道德？恋爱还只是一个选择的过程，你怎么能确定对方就是你要找的那个人，又如何确定对方是否愿意与你共度余生？如果没有足够了解对方，那么你的想法可能不太礼貌。\n\n事实上，从喜欢到恋爱，再到婚姻的过程中，两人的关系变得更加紧密，伴随着更多的道德约束。你要明白失与得就像一对双胞胎兄弟，形影不离。\n\n","tags":["亲密关系"]},{"title":"非此即彼之外找寻第三条路","url":"/2024/08/05/非此即彼之外找寻第三条路/","content":"\n像我这种悲观的人，一部分源于内心非此即彼的错误观念，遇到矛盾的问题就会选择逃避。逃避问题是解决问题的一种不错的选择吗？是这样的，只要你往后无需再面对这个问题，不去解决也是一种解决。可是亲密关系遭遇此类问题如果不去面对，就进入另一个矛盾中，即为放弃这段关系埋下难以根除的种子。\n\n第三条路，这是对抗看似矛盾的情景可行的思考方式，调动智慧看穿背后本质的非矛盾性。用异地恋的故事进行说明，很好体现第三条路的含义，即满足双方需求。男女双方异地，希望彼此周末能够相处一段时间，又都希望是对方来自己的城市见面，各有合理的理由和未道明的内心话，出现看似不可解决的矛盾。第三条路是什么？二人选择自己所在城市的中间城市为目的地，这样彼此能在周末见面，而且往返的路线得到缩短，就不存在你为何不满足我带来的猜疑引发对亲密关系破坏性极强的信任危机。对待同一个问题，永远不要局限于世界抛给你的选项，每多一个选项就拓宽一份认知，也就是说你得主动去认知，不要懈怠。\n\n前面提到满足这个词，我们总有一个情不自禁的假设，叫做：满足，就等于要别人为我让步。比如说，当我需要安静的时候，怎么才能满足？很多人会自动把它理解为：让别人闭嘴。那么它就会和别人的利益造成冲突，别人也不会配合。那有没有第三条路？你可以把门关上，可以出门去图书馆，你可以用降噪耳塞。有很多种方法可以实现你的需求，不是非得要别人为你让步。也就是说，我会坚持我想要实现的目标，即获得安静，但同时也不去强求别人满足我的需求，更不会去评判对方的所作所为，也就是李松蔚老师提到的对自己的每一个需求做到：不强制，不委屈，不评判。\n\n","tags":["亲密关系"]},{"title":"性格的一致性和互补性","url":"/2024/08/05/性格的一致性和互补性/","content":"\n曾有一个问题一直令我困扰：一本书告诉我，性格一致的人更容易获得幸福，而另一本书则坚称性格互补的人更快乐。矛盾双方给我带来的折磨激励我思考，并破除表面诱骗众人不解的虚设矛盾，实现思想上的统一，我找到了解决我内心困扰的答案。\n\n就人性而言，我们更倾向于接近那些与我们性格一致的人，这可以归因于\"吸引力三大法则\"：人们倾向于喜欢与自己相似的人、身边的人，以及难以获得的人。冲突的一部分来源于性格和观点的不一致，所以性格上背离的二人之间很难一开始建立亲密的关系。也就是说，我们会更乐意和观点上和性格上一致性强的人建立亲密关系。通过观察，我们会发现人们通常不会深入与那些持续给自己带来负面情绪的人交往，与他们保持距离常常是明智之选。因此，我们的讨论前提是：建立亲密关系的对象通常具有观点和性格上的让人感到舒服的一致性。\n\n然而，这个世界上是否存在精神层面完全相同的人？答案是否定的。即使建立在强烈一致性基础上的亲密关系也不会免于偏差，这是不可避免的事实。冲突意味着关系中可能会出现裂痕，而修复这些裂痕的过程常常令人感到难堪，独处的过程中也带来不好的情绪体验，生活中尽可能避免冲突是正常的心理。所以，现在面临的困境就是因为一致性而建立亲密关系的二人体验到不一致性，而且相处越深发现的越多。这种矛盾源于观点的错误，即冲突不好，对方和我意见不同就是不支持。\n\n首先，我们不应将一致性的强度视为最终目标，因为在面临不可避免的不一致性时，这可能会导致挫折。相反，我们应该学会适应不一致性，以实现互补性。一个很好的比喻是，我们每个人都有缺点，就像我们的后背一样，但在亲密关系中，两个人可以互相扶持，只留下积极的一面展现出来。在这种互补关系中，我们可以不断成长，变得更好。不要因为对方存在不一致之处而产生争吵，相反，可以通过适当的方法将这些不一致之处朝着积极的方向调整，以实现自我提升。此外，不一致性也为关系增加了乐趣和活力，可以让你更丰富地体验生活。\n\n\n\n","tags":["亲密关系"],"categories":["think"]},{"title":"浅谈AI参与写作","url":"/2024/08/05/浅谈AI参与写作/","content":"\n如果说搜索引擎可以帮我们把可能的答案罗列出来，由用户进行挑选，倒也难免没有自己想要的答案。相比之下，ChatGPT可以根据用户的提问进行理解，直接提供答案，节约时间成本显著。\n\nAI会渐渐地走向各个领域，今天就浅谈AI参与写作这件事情。首先，我持反对态度。如果你让AI写作的话，那请问还有你什么事情？你的身份是什么？除非你并不是要成为一个合格的写作者，不然你就和机器进行身份调换了，你不再是被服务者。我改动太宰治的一句话向你发问：生而为人，你很抱歉？\n\n然而，既然AI是为人类服务的，难道它在写作领域真的是罪恶至极吗？我觉得，AI可以在写作中充当润色的角色。整个作品全部要由你完成，完成之后交给AI润色是完全可以的，它的作用就相当于一个导师帮你提升作品的质量，同时你也没有成为奴隶。\n\n文章的末尾再提及AI提示功能，应用在写作上称为续写。这应用在程序员写代码上提升巨大，工作量得到明显降低，实实在在的事倍功半。但不支持用在写作上，程序员的代码重复度高，跳出的代码更接近于程序员的意图。续写功能却并非如此，而且推荐的内容无法兼顾上下文，影响到写作者的创造思路，借此反驳以此为由说续写功能能够给予作者灵感的乐观看法。\n\n无论是写作还是编写代码，初学者都不应过早依赖AI。我的建议是，像这种需要时间积累的技能，不要轻易让别人代劳。","tags":["技术之观"],"categories":["think"]}]